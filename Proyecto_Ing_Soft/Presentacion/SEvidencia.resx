<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAC
        AnMALS11ADU1EwAgIGcADQ2iAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAGwAAAHgAAAAB
        AAoAAQAjAAICfwA2Nt0AICCrAD4+4wAdHY4AAAA+AAAAFgAVAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAYAAAAAAABAAgALgAY
        AEEABgAgAAIAawARAKYABQCdAAYHmwAREfAAISHcAAEBlQAAAFkAAgAkABIAQAAHADUAAAAGABEAAAAO
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACoAAAAtAAAABAA2ABMAVAAJ
        AEoACQCEABEAwQAHAIMAEQDHAAcAlQAEADIAAgIaABISOAAWFjgAAQBOAAoAqAADAJcADQC3AAgAgwAA
        ACYADwA8AA0AMgAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAIACcAJABGABAASAAD
        AG0ACgDAAAYAdAAWANAACgBSAAYAcgAOALQAAABbAAAADAAAAFMAAACBAAAAcwAAADQACABEAAIATgAA
        AC4AFgCrAAoAmAALAKsACQCXAAAAIQACAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAHAAIADwAdAAkAewAW
        ANAADADUAAwAmAATAJkAAABMAAcAVQAAAEYNDQ3ZJiUm8REREfMAAADDFRUV711dXf84ODj/AAAA1QAA
        AIYBAQG0BAQEvgADAI8ACAA7AAAAIwAIALoAAQB5ABQAmAAXAHcAAAAeABAAAAAAAAAAAAADAAUASAAQ
        ALUABgChAA4AhgAgAL4ABABfAAIAwAQEBOAAAADCAwMD3GRkZP+2trb/jo6O/1xcXP+Kior/w8PD/6io
        qP9YWFj/RERE/3BwcP96enr/GRgZ5gAAAGMAAABeAAAAigAAAEoAEACzAAoAiAAMAE8ADwAoAAAABAAI
        AAgABwA+AAgArAAQAI0ABwAjAAsANwAAAE4kJCT3fn5+/2ZmZv97e3v/rKys/6qqqv+Tk5P+l5eX/by8
        vP/BwcH/s7Oz/52dnf2hoaH/uLi4/8DAwP9mZmb/ISEh/ScnJ/0bGxvtAQEBbwAXAIIACwB5AAsAwgAL
        AIoAAAAdAB4AgAAlAKQADQBbABcAXAAAAGwAAAC0AwMD3lBQUP/BwcH/srKy/4eHh/JZWVnBNDQ0hRYW
        Fl0eHh6FlZWV+8HBwf9mZmbeIiIiYC8vL29NTU2pdnZ25KGhof+tra3/tra2/2VlZf8AAACsAAAAPgAB
        ADoABwCxAA4AhwAZAEAAEABMACEAIgClAAAAAAA/Hh4e8WRkZP90dHT/sbGx/4WFhf86OjrBDw8PQgAA
        AAy5ubkAHR0dAA4ODkSMjIz5urq6/0dHR7YAAAACUVFRAAAAAAIAAAAnKioqj19fX/m3t7f/j4+P/ykp
        KfsVFRXuAQEBugABAEMAHABpABsAtgAWAAAAHgAAAAAAFwAAAG4lJSXura2t/8XFxf+6urr/Q0ND/wEB
        Ab4AAABLAAAAEgUFBQAAAAAAExMTRI6Ojvm0tLT/PT09pQAAAACKiooAAAAAHgAAAF4CAgK1LCws+6mp
        qf/Dw8P/s7Oz/5OTk/8ZGRnzAAAATABiAAAAAwAeAAAAAAAAAAEGBgZ/KCgo+1NTU/61tbX/u7u7/7a2
        tv+urq7/e3t7/z4+PvcSEhLKAAAAgQAAAFINDQ2bmJiY/LCwsP8kJCTOAAAAZwAAAIwZGRnYRERE/Ht7
        e/+tra3/tra2/7Kysv/CwsL/l5eX/w8PD98AAABgAAAAEAACAAAAAAAAAAAACxkZGbiQkJD+v7+//7W1
        tf9dXV3YWlpaiX9/f7menp7srKys/5aWlv9jY2P/Kioq+zg4OP+mpqb/srKy/1paWv88PDz/bW1t/6Cg
        oP+wsLD/n5+f9319fdNWVlaaPT09q4yMjP22trb/Z2dn/y8vL/cCAgJJAAAAAAAAAAAAAAAIBAQEbzEx
        Me6ysrL/jo6O/w0NDX7///8AAAAACi4uLjRZWVl+goKCwpubm/ixsbH/mpiY/1FNTf9QTEz/goCA/729
        vf+hoaH8e3t701JSUpIrKytLAAAAGAAAAAAAAAAoVlZW58HBwf+2trb/cnJy8gsLC1oAAAAAAAAAAAAA
        ABYTExPPW1tb/ru7u/+BgYH/BQUFbQAAAAABAQEAAAAAAgAAACwBAACIKiYm75OVlv9Xe3z/A2Vl/wlm
        Z/8yUFH/p6mq/z87PPgAAACSAAAALgAAAAIDAwMAAAAAAAAAABpUVFTdwcHB/21tbf4KCgq5AgICKwAA
        AAAAAAAAAAAADDMzM8Gjo6P/wsLC/4+Pj/8NDQ2MAAAAGwAAAFcMCAipIh8f5zNDRP8wdnT/Gp6I/wTL
        sv8A8PL/AOvl/wXIrv8hpI7/J2lg/yI0NP4YFRbnBwMEqgAAAGAAAAAfAAAAOFtbW+3CwsL/mpqa/zo6
        OvwBAQFZAAAAAAAAAAAAAAABEBAQOTAwMJ6EhIT8tbW1/0pISOohHR7XJiws+jJcW/8kjYT/CrGT/wDQ
        sP8AsYz/AHpM/wCLQ/8AjUn/AJt7/wC3iP8AxZT/CrGP/yB/bv8mTkr/ICco/RIPENkcGhrRj4+P/rW1
        tf+CgoL3S0tL2AEBATEAAAAAAAAAAAAAAAAAAAALAAAAsk5LS/6wr7D/e5WV/zaDev8Tqpb/BNK4/wDE
        ov8AnGz/AGBL/wA4Xf8BMiv/AJQA/wCOAP8ALi7/AEZo/wBqa/8Am27/ALV4/wPDmP8Rnnv/J29f/2B5
        dv+vr6//fXp7/wkICM0AAAA0AAAAAwAAAAAAAAAAAAAAAAAAABkIDAzcPnh5/yiomv8GtIn/ALd9/wCo
        fP8AcWb/ADY8/wVMDP8POxX/IzNI/yQtMv8WMRb/EC0Q/x4nLP8hNk7/FSo7/wlMEv8BSj3/AHFn/wCb
        bf8Avoz/CLSH/ySbgf9DdWn/GBsb8gAAADkAAAAAAAAAAAAAAAAAAAAAAAAAGQAYGNoAx8r/AM/G/wB9
        Zv8ARi//CisY/xwiKP8rLjT/Nzg4/09OT/9NSkv/T09O/1paWv89Rj3/Ky8r/zU1M/8/Pz7/P0U+/zY7
        Ov8qMDf/Eygi/wFHPP8AgHH/AKyD/wCojP8BFxj1AAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAZABAN2gB6
        SP8AVjb/ADJY/wAXN/8zMTP/n6ae/5Owkv+DpIP/ZpFm/2+Sb/9/qH//vsy+/42xjf9+pX7/b5Zv/3ic
        eP+hu6H/hLKD/0WHRP80QjX/Axs9/wAwYP8AQDj/AHBA/wASC/QAAAA8AAAAAAAAAAAAAAAAAAAAAAAA
        ABkABgHaAE8Q/wB9Cv8AdA3/AFAb/zNOOv/o6Of/yujK/6fWpv+JyIn/kcuR/4PEg/+ryqv/kbWR/87r
        zv/G5sb/fsJ+/6HTof+Xzpf/bq1t/xo9If8AQCD/AF8Q/wBzCf8AXQ3/AAsC9AAAADwAAAAAAAAAAAAA
        AAAAAAAAAAAAGQACA9oAJkf/ADdd/wBDRf8AVSr/A1MV/3mEff/P1M//g5+D/2eKaP+Cp4L/pcOl/4aX
        hv9VcVX/jbKN/4+zj/9zk3L/Ynph/6Ovo/99g4P/BD8c/wBNMP8AREn/ADlg/wAqVf8AAwf0AAAAPAAA
        AAAAAAAAAAAAAAAAAAAAAAAZAAYA2gBgCf8AeRf/AGUj/wBSMP8AQzT/Ci4l/x0vK/8IKRD/BiAO/xIf
        Hv8hJCL/DgoK/wIFAP8HDgb/BxMQ/wUSFP8BGBz/CyAr/wkfJv8AMj3/AEQ7/wBPLv8AXyD/AFkT/wAJ
        AfQAAAA8AAAAAAAAAAAAAAAAAAAAAAAAABkFBQDaRlME/1hxB/9ScQv/Sm8R/0RsGP84Xh7/NVMk/zlH
        JP8zORr/GR4L/wBJSf8AdXT/AHV1/wBOT/8YFhD/Jicb/yQ2Kv8pRy//KFEu/zJgKv85aCD/OnMe/0Fz
        Fv88XxD/BwkC9AAAADwAAAAAAAAAAAAAAAAAAAAAAAAAGQIJCdodlor/I8S1/yLCtP8pt6X/O6iN/0qV
        cv9Vhl3/U3ZN/0JiQv8iMiL/BTo4/wGGhv8HhID/ED02/0EsDP9cTR//Y2s5/2x+Sf9alGj/QqaH/y60
        oP8bxrv/Fc/H/xGyrP8CFBP0AAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAZBAgG2kp0T/+Hj0v/o4My/6d4
        JP+Sfzf/Y4xb/0aLav9Wckn/Sl04/zFJMf8gOCn/AUNE/xw9MP86NBj/QlMz/1dmOv9sbDf/WoRY/2yF
        UP+Yey//u3UX/715G/+riDL/d3k+/wsOCfQAAAA8AAAAAAAAAAAAAAAAAAAAAAAAABkLBgDalloP/52N
        Pv9apHf/KLik/yStm/9okF7/kW0m/1Z2Tf8Ua2D/KlAy/wpXRP8AgFP/AoVw/xVQLf9LWDD/F3Vq/0SR
        cP+VdS3/e4FF/zikif8psp7/UqZ+/5KLQv+jYxL/FAoB9AAAADwAAAAAAAAAAAAAAAAAAAAAAAAAGQIL
        CtoIp6P/Bt3b/y6znP+BhET/w2wM/5RXEP8lZU7/AH50/wBwS/8AcUP/AJF9/wBrHf8AcD3/AFEg/wBQ
        M/8CaE3/AIN4/xaKff95aS7/zWwH/6GCMf9Fo4H/Ds/J/wayr/8CExL0AAAAPAAAAAAAAAAAAAAAAAAA
        AAAAAAAZAgkI2kN4Vv+mgC3/0W0F/6pvGf9LVB3/BmVR/wBoQ/8Aelz/AH1W/wCSdf8ArZ7/AHJB/wCA
        Wv8Ajn3/AGVN/wBtSP8AYCL/AGZD/wBhT/81UCj/q24Z/+VyAP/Dehj/ZHVE/wcOC/QAAAA8AAAAAAAA
        AAAAAAAAAAAAAAAAABkKBQDajFIM/4OFRP8ysZj/BbKn/wBfMf8AXD//AFs+/wCFeP8Ae2v/AMvD/wC0
        p/8Afmf/AI90/wBtUv8AUDz/AKig/wBhM/8AfFz/AF03/wCFav8J1tP/PLCS/46JQv+rYQz/FQoA9AAA
        ADwAAAAAAAAAAAAAAAAAAAAAAAAAGQICAtoKMi3/AGdo/wB3eP8AaGf/AD84/wBHRP8AQj7/ADg1/wBM
        S/8AZ2f/AGFf/wBOS/8AVFD/ADIo/wBEQP8AYF//ADkw/wBKRP8AQjz/AE1J/wB1dv8Adnj/AGZn/xI1
        LP8EAwH0AAAAPAAAAAAAAAAA//gP///wB///AAD//AAAH8AAAAcAAAADAAAAAAAAAAAAAAAAIAwQAMAM
        MAKAAAABgAAAAYEAAAGBgAGBgAAAAYAAAAHAAAABwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAM=
</value>
  </data>
</root>